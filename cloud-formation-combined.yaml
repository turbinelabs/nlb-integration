# Copyright 2017 Turbine Labs, Inc.
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS.
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied. See the License for the specific language governing
# permissions and limitations under the License.

AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Run Envoy in an autoscaling group behind an NLB, along with all-in-one-client and
  all-in-one-server autoscaling groups. This has the same effect as launching stacks
  using the cloud-formation-nlb.yaml, cloud-formation-all-in-one-client.yaml, and
  all-in-one-server.yaml files.
Parameters:
  TbnAccessKey:
    Type: String
    Description: Turbine Labs Access Key
  TbnZoneName:
    Type: String
    Description: Turbine Labs Zone name for this stack
    Default: nlb-demo
  TbnProxyName:
    Type: String
    Description: The Turbine Labs proxy name to instantiate in this stack
    Default: nlb-demo
  AwsAccessKeyId:
    Type: String
    Description: AWS Access Key to use for inspecting EC2 instances
  AwsSecretAccessKey:
    Type: String
    Description: AWS Secret Access Key to use for inspecting EC2 instances
  VpcId:
    Type: 'AWS::EC2::VPC::Id'
    Description: VpcId of your existing Virtual Private Cloud (VPC)
    ConstraintDescription: must be the VPC Id of an existing Virtual Private Cloud.
  Subnets:
    Type: 'List<AWS::EC2::Subnet::Id>'
    Description: The list of SubnetIds in your Virtual Private Cloud (VPC)
    ConstraintDescription: >-
      must be a list of at least two existing subnets associated with at least
      two different availability zones. They should be residing in the selected
      Virtual Private Cloud.
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.small
    AllowedValues:
      - t1.micro
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - m1.small
      - m1.medium
      - m1.large
      - m1.xlarge
      - m2.xlarge
      - m2.2xlarge
      - m2.4xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - c1.medium
      - c1.xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - i2.xlarge
      - i2.2xlarge
      - i2.4xlarge
      - i2.8xlarge
      - d2.xlarge
      - d2.2xlarge
      - d2.4xlarge
      - d2.8xlarge
      - hi1.4xlarge
      - hs1.8xlarge
      - cr1.8xlarge
      - cc2.8xlarge
      - cg1.4xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
Mappings:
  AWSInstanceType2Arch:
    t1.micro:
      Arch: PV64
    t2.nano:
      Arch: HVM64
    t2.micro:
      Arch: HVM64
    t2.small:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
    t2.large:
      Arch: HVM64
    m1.small:
      Arch: PV64
    m1.medium:
      Arch: PV64
    m1.large:
      Arch: PV64
    m1.xlarge:
      Arch: PV64
    m2.xlarge:
      Arch: PV64
    m2.2xlarge:
      Arch: PV64
    m2.4xlarge:
      Arch: PV64
    m3.medium:
      Arch: HVM64
    m3.large:
      Arch: HVM64
    m3.xlarge:
      Arch: HVM64
    m3.2xlarge:
      Arch: HVM64
    m4.large:
      Arch: HVM64
    m4.xlarge:
      Arch: HVM64
    m4.2xlarge:
      Arch: HVM64
    m4.4xlarge:
      Arch: HVM64
    m4.10xlarge:
      Arch: HVM64
    c1.medium:
      Arch: PV64
    c1.xlarge:
      Arch: PV64
    c3.large:
      Arch: HVM64
    c3.xlarge:
      Arch: HVM64
    c3.2xlarge:
      Arch: HVM64
    c3.4xlarge:
      Arch: HVM64
    c3.8xlarge:
      Arch: HVM64
    c4.large:
      Arch: HVM64
    c4.xlarge:
      Arch: HVM64
    c4.2xlarge:
      Arch: HVM64
    c4.4xlarge:
      Arch: HVM64
    c4.8xlarge:
      Arch: HVM64
    r3.large:
      Arch: HVM64
    r3.xlarge:
      Arch: HVM64
    r3.2xlarge:
      Arch: HVM64
    r3.4xlarge:
      Arch: HVM64
    r3.8xlarge:
      Arch: HVM64
    i2.xlarge:
      Arch: HVM64
    i2.2xlarge:
      Arch: HVM64
    i2.4xlarge:
      Arch: HVM64
    i2.8xlarge:
      Arch: HVM64
    d2.xlarge:
      Arch: HVM64
    d2.2xlarge:
      Arch: HVM64
    d2.4xlarge:
      Arch: HVM64
    d2.8xlarge:
      Arch: HVM64
    hi1.4xlarge:
      Arch: HVM64
    hs1.8xlarge:
      Arch: HVM64
    cr1.8xlarge:
      Arch: HVM64
    cc2.8xlarge:
      Arch: HVM64
  AWSInstanceType2NATArch:
    t1.micro:
      Arch: NATPV64
    t2.nano:
      Arch: NATHVM64
    t2.micro:
      Arch: NATHVM64
    t2.small:
      Arch: NATHVM64
    t2.medium:
      Arch: NATHVM64
    t2.large:
      Arch: NATHVM64
    m1.small:
      Arch: NATPV64
    m1.medium:
      Arch: NATPV64
    m1.large:
      Arch: NATPV64
    m1.xlarge:
      Arch: NATPV64
    m2.xlarge:
      Arch: NATPV64
    m2.2xlarge:
      Arch: NATPV64
    m2.4xlarge:
      Arch: NATPV64
    m3.medium:
      Arch: NATHVM64
    m3.large:
      Arch: NATHVM64
    m3.xlarge:
      Arch: NATHVM64
    m3.2xlarge:
      Arch: NATHVM64
    m4.large:
      Arch: NATHVM64
    m4.xlarge:
      Arch: NATHVM64
    m4.2xlarge:
      Arch: NATHVM64
    m4.4xlarge:
      Arch: NATHVM64
    m4.10xlarge:
      Arch: NATHVM64
    c1.medium:
      Arch: NATPV64
    c1.xlarge:
      Arch: NATPV64
    c3.large:
      Arch: NATHVM64
    c3.xlarge:
      Arch: NATHVM64
    c3.2xlarge:
      Arch: NATHVM64
    c3.4xlarge:
      Arch: NATHVM64
    c3.8xlarge:
      Arch: NATHVM64
    c4.large:
      Arch: NATHVM64
    c4.xlarge:
      Arch: NATHVM64
    c4.2xlarge:
      Arch: NATHVM64
    c4.4xlarge:
      Arch: NATHVM64
    c4.8xlarge:
      Arch: NATHVM64
    r3.large:
      Arch: NATHVM64
    r3.xlarge:
      Arch: NATHVM64
    r3.2xlarge:
      Arch: NATHVM64
    r3.4xlarge:
      Arch: NATHVM64
    r3.8xlarge:
      Arch: NATHVM64
    i2.xlarge:
      Arch: NATHVM64
    i2.2xlarge:
      Arch: NATHVM64
    i2.4xlarge:
      Arch: NATHVM64
    i2.8xlarge:
      Arch: NATHVM64
    d2.xlarge:
      Arch: NATHVM64
    d2.2xlarge:
      Arch: NATHVM64
    d2.4xlarge:
      Arch: NATHVM64
    d2.8xlarge:
      Arch: NATHVM64
    hi1.4xlarge:
      Arch: NATHVM64
    hs1.8xlarge:
      Arch: NATHVM64
    cr1.8xlarge:
      Arch: NATHVM64
    cc2.8xlarge:
      Arch: NATHVM64
  AWSRegionArch2AMI:
    us-east-1:
      PV64: ami-b27ce2c8
      HVM64: ami-1a7de360
    us-west-2:
      PV64: ami-f760b98f
      HVM64: ami-1f63ba67
    us-west-1:
      PV64: ami-867b41e6
      HVM64: ami-ef7a408f
    eu-west-1:
      PV64: ami-f2bc018b
      HVM64: ami-f2c27f8b
    eu-west-2:
      PV64: ami-1c6c7278
      HVM64: ami-6e6e700a
    eu-central-1:
      PV64: ami-e8ed6287
      HVM64: ami-91ed62fe
    ap-northeast-1:
      PV64: ami-bcb10ada
      HVM64: ami-26bc0740
    ap-northeast-2:
      PV64: ami-3718bf59
      HVM64: ami-e11abd8f
    ap-southeast-1:
      PV64: ami-08acfe6b
      HVM64: ami-89acfeea
    ap-southeast-2:
      PV64: ami-6f7e8b0d
      HVM64: ami-be7d88dc
    ap-south-1:
      PV64: ami-8efcb2e1
      HVM64: ami-dafdb3b5
    us-east-2:
      PV64: ami-f44c6591
      HVM64: ami-2e4f664b
    ca-central-1:
      PV64: ami-ad44ffc9
      HVM64: ami-8245fee6
    sa-east-1:
      PV64: ami-daa8ecb6
      HVM64: ami-bcaeead0
    cn-north-1:
      PV64: ami-c2ea38af
      HVM64: ami-84e735e9
Resources:
  EnvoyGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Description: |
      An autoscaling group to manage Envoy proxy instances. Sets TargetGroupARNs to
      get instances registered with the LBTargetGRoup
    Properties:
      VPCZoneIdentifier: !Ref Subnets
      LaunchConfigurationName: !Ref EnvoyLaunchConfig
      MinSize: '2'
      MaxSize: '4'
      TargetGroupARNs:
        - !Ref LBTargetGroup

  EnvoyScaleOutPolicy:
    Type : "AWS::AutoScaling::ScalingPolicy"
    Description: 'A policy to expand the size of the Envoy proxy pool by 1 instance'
    Properties:
      AutoScalingGroupName: !Ref EnvoyGroup
      AdjustmentType: 'ChangeInCapacity'
      Cooldown: 300
      ScalingAdjustment: 1
  EnvoyScaleOutAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Description: |
      When average bandwidth for Envoy instances exceeds a threshold trigger
      the EnvoyScaleOut policy (increasing instance count by 1)
    Properties:
      AlarmName:
        Fn::Join:
        - '-'
        - - !Ref 'AWS::StackName'
          - 'envoy-bytes-alarm-out'
      AlarmActions:
        - !Ref 'EnvoyScaleOutPolicy'
      AlarmDescription: 'This metric monitors Envoy network utilization'
      ComparisonOperator: 'GreaterThanOrEqualToThreshold'
      EvaluationPeriods: 2
      MetricName: 'NetworkIn'
      Namespace: 'AWS/EC2'
      Period: 60
      Statistic: 'Average'
      Threshold: 1000000
      Dimensions:
        - Name: 'AutoScalingGroupName'
          Value: !Ref EnvoyGroup

  EnvoyScaleInPolicy:
    Type : "AWS::AutoScaling::ScalingPolicy"
    Description: 'A policy to reduce the size of the Envoy proxy pool by 1 instance'
    Properties:
      AutoScalingGroupName: !Ref EnvoyGroup
      AdjustmentType: 'ChangeInCapacity'
      Cooldown: 300
      ScalingAdjustment: -1
  EnvoyScaleInAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Description: |
      When average bandwidth for Envoy instances drops below a threshold trigger
      the EnvoyScaleIn policy (reducing instance count by 1)
    Properties:
      AlarmName:
        Fn::Join:
        - '-'
        - - !Ref 'AWS::StackName'
          - 'envoy-bytes-alarm-in'
      AlarmActions:
        - !Ref 'EnvoyScaleInPolicy'
      AlarmDescription: 'This metric monitors Envoy network utilization'
      ComparisonOperator: 'LessThanOrEqualToThreshold'
      EvaluationPeriods: 2
      MetricName: 'NetworkIn'
      Namespace: 'AWS/EC2'
      Period: 60
      Statistic: 'Average'
      Threshold: 800000
      Dimensions:
        - Name: 'AutoScalingGroupName'
          Value: !Ref EnvoyGroup

  EnvoyLaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Description: 'Launch an Envoy proxy running in the tbnproxy container, using ContainerLinux'
    Metadata:
      Comment: Envoy running under tbnproxy
    Properties:
      AssociatePublicIpAddress: true
      ImageId: !FindInMap
        - AWSRegionArch2AMI
        - !Ref 'AWS::Region'
        - !FindInMap
          - AWSInstanceType2Arch
          - !Ref InstanceType
          - Arch
      SecurityGroups:
        - !Ref LBSecurityGroup
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      UserData: !Base64
        'Fn::Join':
          - ''
          - - |+
              #cloud-config

            - |2
              coreos:
                units:
                  - name: "tbnproxy.service"
                    command: "start"
                    content: |
                      [Unit]
                      Description=Tbnproxy Service
                      After=docker.service
                      Requires=docker.service
                      [Service]

                      TimeoutStartSec=0
                      Restart=always
                      ExecStartPre=-/usr/bin/docker stop %n
                      ExecStartPre=-/usr/bin/docker rm %n
                      ExecStartPre=/usr/bin/docker pull turbinelabs/tbnproxy:0.14.2
            - '        ExecStart=/usr/bin/docker run --name %n -e "TBNPROXY_API_KEY='
            - !Ref TbnAccessKey
            - '" -e "TBNPROXY_API_ZONE_NAME='
            - !Ref TbnZoneName
            - '" -e "TBNPROXY_PROXY_NAME='
            - !Ref TbnProxyName
            - '" -p 80:80 turbinelabs/tbnproxy:0.14.2'
            - |+


            - |2
                      [Install]
                      WantedBy=multi-user.target

  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Description: 'The NLB that handles network traffic coming into the VPC'
    Properties:
      Subnets: !Ref Subnets
      Type: 'network'
  NLBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Description: |
      A listener attached to the load balancer listening on port 80, forwarding to
      the LBTargetGroup
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref LBTargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: '80'
      Protocol: TCP
  LBTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Description: |
      Target group for the LoadBalancer. Note that the Envoy autoscaling group sets its
      TargetGroupARN field to this target group, ensuring Envoy instances are registered
      with the target group
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthyThresholdCount: 3
      Port: 80
      Protocol: TCP
      UnhealthyThresholdCount: 3
      VpcId: !Ref VpcId
  LBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'SSH and HTTP inbound, egress to VPC'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref SSHLocation
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: '0.0.0.0/0'
      VpcId: !Ref VpcId

  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'SSH inbound, port 8080 inbound from the load balancer'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '8080'
          SourceSecurityGroupId: !Ref LBSecurityGroup
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref SSHLocation
      VpcId: !Ref VpcId

  TbnCollect:
    Type: 'AWS::EC2::Instance'
    Description: 'Turbine Labs service discovery agent'
    Properties:
      NetworkInterfaces:
        - DeviceIndex: 0
          AssociatePublicIpAddress: true
          SubnetId: !Select
            - 0
            - !Ref Subnets
          GroupSet:
            - !Ref InstanceSecurityGroup
      ImageId: !FindInMap
        - AWSRegionArch2AMI
        - !Ref 'AWS::Region'
        - !FindInMap
          - AWSInstanceType2Arch
          - !Ref InstanceType
          - Arch
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      UserData: !Base64
        'Fn::Join':
          - ''
          - - |+
              #cloud-config

            - |2
              coreos:
                units:
                  - name: "tbncollect.service"
                    command: "start"
                    content: |
                      [Unit]
                      Description=Tbncollect Service
                      After=docker.service
                      Requires=docker.service
                      [Service]

                      TimeoutStartSec=0
                      Restart=always
                      ExecStartPre=-/usr/bin/docker stop %n
                      ExecStartPre=-/usr/bin/docker rm %n
                      ExecStartPre=/usr/bin/docker pull turbinelabs/tbncollect:0.14.2
            - '        ExecStart=/usr/bin/docker run --name %n -e "TBNCOLLECT_API_KEY='
            - !Ref TbnAccessKey
            - '" -e "TBNCOLLECT_API_ZONE_NAME='
            - !Ref TbnZoneName
            - '" -e "TBNCOLLECT_AWS_AWS_REGION='
            - !Ref 'AWS::Region'
            - '" -e "TBNCOLLECT_AWS_AWS_ACCESS_KEY_ID='
            - !Ref AwsAccessKeyId
            - '" -e "TBNCOLLECT_AWS_AWS_SECRET_ACCESS_KEY='
            - !Ref AwsSecretAccessKey
            - '" -e "TBNCOLLECT_AWS_VPC_ID='
            - !Ref VpcId
            - '" -e "TBNCOLLECT_CMD=aws" -p 80:80 turbinelabs/tbncollect:0.14.2'
            - |+


            - |2
                      [Install]
                      WantedBy=multi-user.target
  AllInOneServer:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    
    Properties:
      VPCZoneIdentifier: !Ref Subnets
      LaunchConfigurationName: !Ref AllInOneServerLaunchConfig
      MinSize: '1'
      MaxSize: '3'
      Tags:
        - Key: 'tbn:cluster:server:8080'
          Value: 'cluster'
          PropagateAtLaunch: true
        - Key: 'version'
          Value: '0.14.2'
          PropagateAtLaunch: true
        - Key: 'stage'
          Value: 'prod'
          PropagateAtLaunch: true

  AllInOneServerScaleOutPolicy:
    Type : "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AutoScalingGroupName: !Ref AllInOneServer
      AdjustmentType: 'ChangeInCapacity'
      Cooldown: 300
      ScalingAdjustment: 1
  AllInOneServerScaleOutAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmName:
        Fn::Join:
        - '-'
        - - !Ref 'AWS::StackName'
          - 'all-in-one-server-bytes-alarm-out'
      AlarmActions:
        - !Ref 'AllInOneServerScaleOutPolicy'
      AlarmDescription: 'This metric monitors all-in-one server network utilization'
      ComparisonOperator: 'GreaterThanOrEqualToThreshold'
      EvaluationPeriods: 2
      MetricName: 'NetworkIn'
      Namespace: 'AWS/EC2'
      Period: 60
      Statistic: 'Average'
      Threshold: 1000000
      Dimensions:
        - Name: 'AutoScalingGroupName'
          Value: !Ref AllInOneServer

  AllInOneServerScaleInPolicy:
    Type : "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AutoScalingGroupName: !Ref AllInOneServer
      AdjustmentType: 'ChangeInCapacity'
      Cooldown: 300
      ScalingAdjustment: -1
  AllInOneServerScaleInAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmName:
        Fn::Join:
        - '-'
        - - !Ref 'AWS::StackName'
          - 'all-in-one-server-bytes-alarm-in'
      AlarmActions:
        - !Ref 'AllInOneServerScaleInPolicy'
      AlarmDescription: 'This metric monitors all-in-one-server network utilization'
      ComparisonOperator: 'LessThanOrEqualToThreshold'
      EvaluationPeriods: 2
      MetricName: 'NetworkIn'
      Namespace: 'AWS/EC2'
      Period: 60
      Statistic: 'Average'
      Threshold: 800000
      Dimensions:
        - Name: 'AutoScalingGroupName'
          Value: !Ref AllInOneServer

  AllInOneServerLaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Metadata:
      Comment: All in One Server
    Properties:
      AssociatePublicIpAddress: true
      ImageId: !FindInMap
        - AWSRegionArch2AMI
        - !Ref 'AWS::Region'
        - !FindInMap
          - AWSInstanceType2Arch
          - !Ref InstanceType
          - Arch
      SecurityGroups:
        - !Ref InstanceSecurityGroup
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      UserData: !Base64
        'Fn::Join':
          - ''
          - - |+
              #cloud-config

            - |2
              coreos:
                units:
                  - name: "all-in-one-server.service"
                    command: "start"
                    content: |
                      [Unit]
                      Description=All-in-one server Service
                      After=docker.service
                      Requires=docker.service
                      [Service]

                      TimeoutStartSec=0
                      Restart=always
                      ExecStartPre=-/usr/bin/docker stop %n
                      ExecStartPre=-/usr/bin/docker rm %n
                      ExecStartPre=/usr/bin/docker pull turbinelabs/all-in-one-server:0.14.2
                      ExecStart=/usr/bin/docker run --name %n -e 'TBN_COLOR=1B9AE4' -p 8080:8080 turbinelabs/all-in-one-server:0.14.2
                      [Install]
                      WantedBy=multi-user.target

  AllInOneClient:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      VPCZoneIdentifier: !Ref Subnets
      LaunchConfigurationName: !Ref AllInOneClientLaunchConfig
      MinSize: '1'
      MaxSize: '3'
      Tags:
        - Key: 'tbn:cluster:client:8080'
          Value: 'cluster'
          PropagateAtLaunch: true
        - Key: 'version'
          Value: '0.14.2'
          PropagateAtLaunch: true
        - Key: 'stage'
          Value: 'prod'
          PropagateAtLaunch: true

  AllInOneClientScaleOutPolicy:
    Type : "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AutoScalingGroupName: !Ref AllInOneClient
      AdjustmentType: 'ChangeInCapacity'
      Cooldown: 300
      ScalingAdjustment: 1
  AllInOneClientScaleOutAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmName:
        Fn::Join:
        - '-'
        - - !Ref 'AWS::StackName'
          - 'all-in-one-client-bytes-alarm-out'
      AlarmActions:
        - !Ref 'AllInOneClientScaleOutPolicy'
      AlarmDescription: 'This metric monitors all-in-one client network utilization'
      ComparisonOperator: 'GreaterThanOrEqualToThreshold'
      EvaluationPeriods: 2
      MetricName: 'NetworkIn'
      Namespace: 'AWS/EC2'
      Period: 60
      Statistic: 'Average'
      Threshold: 1000000
      Dimensions:
        - Name: 'AutoScalingGroupName'
          Value: !Ref AllInOneClient

  AllInOneClientScaleInPolicy:
    Type : "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AutoScalingGroupName: !Ref AllInOneClient
      AdjustmentType: 'ChangeInCapacity'
      Cooldown: 300
      ScalingAdjustment: -1
  AllInOneClientScaleInAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmName:
        Fn::Join:
        - '-'
        - - !Ref 'AWS::StackName'
          - 'all-in-one-client-bytes-alarm-in'
      AlarmActions:
        - !Ref 'AllInOneClientScaleInPolicy'
      AlarmDescription: 'This metric monitors all-in-one-client network utilization'
      ComparisonOperator: 'LessThanOrEqualToThreshold'
      EvaluationPeriods: 2
      MetricName: 'NetworkIn'
      Namespace: 'AWS/EC2'
      Period: 60
      Statistic: 'Average'
      Threshold: 800000
      Dimensions:
        - Name: 'AutoScalingGroupName'
          Value: !Ref AllInOneClient

  AllInOneClientLaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Metadata:
      Comment: All in One Client
    Properties:
      AssociatePublicIpAddress: true
      ImageId: !FindInMap
        - AWSRegionArch2AMI
        - !Ref 'AWS::Region'
        - !FindInMap
          - AWSInstanceType2Arch
          - !Ref InstanceType
          - Arch
      SecurityGroups:
        - !Ref InstanceSecurityGroup
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      UserData: !Base64
        'Fn::Join':
          - ''
          - - |+
              #cloud-config

            - |2
              coreos:
                units:
                  - name: "all-in-one-client.service"
                    command: "start"
                    content: |
                      [Unit]
                      Description=All-in-one client Service
                      After=docker.service
                      Requires=docker.service
                      [Service]

                      TimeoutStartSec=0
                      Restart=always
                      ExecStartPre=-/usr/bin/docker stop %n
                      ExecStartPre=-/usr/bin/docker rm %n
                      ExecStartPre=/usr/bin/docker pull turbinelabs/all-in-one-client:0.14.2
                      ExecStart=/usr/bin/docker run --name %n -p 8080:8080 turbinelabs/all-in-one-client:0.14.2
                      [Install]
                      WantedBy=multi-user.target

Outputs:
  URL:
    Description: URL of the website
    Value: !Join
      - ''
      - - 'http://'
        - !GetAtt
          - LoadBalancer
          - DNSName
